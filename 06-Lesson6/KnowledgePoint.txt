一、编译预处理命令
1.文件包含命令
2.宏定义
    ①Hook:函数调用需要一定的开销,特别是对一些小函数的频繁调用将可能极大降低程序的执行效率,此时可以使用宏定义定义"小函数"
    ②格式: #define <宏名>(<参数列表>) <文字串>
    ③注意点:
        >需要加上一定的括号
        e.g. #define MAX(a, b) a > b ? a : b
        10 + MAX(x, y) + z ==> 10 + x > y ? x : y + z
        >有时会出现重复计算
        e.g. #define MAX(a, b) (((a) > (b)) ? (a) : (b))
        MAX(x + 1, y * 2) ==> (((x + 1) > (y * 2)) ? (x + 1) : (y * 2))
        >不能进行参数类型检查和转换
        >不利于一些工具对程序的处理
3.条件编译
    ①定义:编译程序根据不同的情况来选择需要编译的程序代码
    e.g.1
    <代码1>    //必须编译的代码
    #define ABC
    #ifdef ABC
        <代码2>    //如果宏名ABC有定义,编译之
    #else
        <代码3>    //如果宏名ABC无定义,编译之
    <代码4>    //必须编译的代码

    e.g.2
    #if <常量表达式1>  or  #ifdef <宏名>  or  #ifndef <宏名>
        <代码1>
    #elif <常量表达式2>
        <代码2>
    ...
    #elif <常量表达式n>
        <代码n>
    #else
        <代码n + 1>
    #endif
    ②用途
        >开发适配于不同操作系统的软件
        >调试

二、内联函数
1.定义:指在定义函数定义时,在函数返回值类型之前加上关键词inline
2.作用:建议编译程序把该函数的函数体展开(插入)到调用点,以提高函数调用的效率
3.注意点
    >编译程序对内联函数的限制
    >内联函数名具有文件作用域
注:
    ①内联函数的高效是以代码膨胀(复制)为代价的,仅仅省去了函数调用的开销
        >对于复杂功能,定义为内联函数效率的收获会很少
        >每一处内联函数的调用都要复制代码,将使程序的总代码量增大,消耗更多的内存空间
    ②两种情况慎用内联函数:
        >函数体内的代码比较长,使用内联函数将导致内存消耗代价较高
        >函数体内出现循环

三、关于函数的其他操作
1.带缺省值的形参
    ①允许在声明函数时，为函数的某些参数指定默认值
    如果调用这些函数时没有提供相应的实参，则相应的形参采用指定的默认值
    ②注意点:
        >有默认值的形参应处于形参列表的最后
        >对参数默认值的指定只在 函数声明 (包括定义性声明)处有意义
        >在同一个源文件中,对同一个函数的声明只能对它的每一个参数指定一次默认值
        >在不同源文件中,对同一个函数的声明可以对它的同一个参数指定不同的默认值
2.函数的重载
    ①定义:对于一些功能相同、参数类型或个数不同的函数,有时给它们取相同的名字会带来使用上的方便
    ②对重载函数调用的绑定
        >定义:确定一个对重载函数的调用对应着哪一个重载函数的过程,又叫定联、联编、捆绑
    ③匹配的类型
        I.精确匹配
            >类型相同
            >对实参进行"微小"的类型转换
            e.g.数组变量名 --> 数组首地址
                函数名 --> 函数首地址
        II.提升匹配:先对实参进行下面的类型提升,然后进行精确匹配
            >按整型提升规则提升实参类型
            >把float类型实参提升到double
            >把double类型实参提升到long double
        III.标准转换匹配
            >任何算术类型可以相互转换
            >枚举类型可以转换成任何算术类型
            >零可以转换成任何算术类型或指针类型
            >任何类型的指针可以转换成void*
            >派生类指针可以转换成基类指针
        VI.自定义转换匹配