一、引用类型
1.作用:给一个变量取一个别名
2.使用
    int x = 0;
    int &y = x;    // y是引用类型的变量,可以看成是x的别名
    y = 1;
    printf("x = %d, y = %d\n", x, y);
3.引用类型和指针类型的区别:
    ①语法上:对引用类型变量的访问与非引用类型相同
    ②语义上:
        >对引用类型变量的访问实际访问的是另一个变量(被引用的变量)
        >效果与通过指针间接访问另一个变量相同
4.注意点
    ①定义引用类型变量时, 应在变量名前加上 & ,以区别于普通变量
    ②定义引用变量一定要有初始化,并且引用变量和被引用变量应具有相同的类型
    ③引用类型的变量定义后,不能再引用其他变量
5.引用类型作为函数的参数
    ①提高参数传递的效率
    e.g.
        struct A {
            int i = 0;
            ...
        }
        void f(A &x) {  //引用相应的实参
            ...
            ...x.i...   //访问实参
            ...
        }
        int main() {
            A a;
            ...
            f(a);   //引用传递
            ...
            return 0;
        }
    ②通过形参改变实参的值
    e.g.
        void swap(int &x, int &y) {
            int temp = x;
            x = y;
            y = temp;
        }
        int main() {
            int a = 0;
            int b = 1;
            printf("%d%d", a, b);
            swap(a, b);
            printf("%d%d", a, b);
            return 0;
        }
6.引用类型和指针类型的区别
    ①引用类型和指针类型都可以实现通过一个变量访问另一个变量,但是在语法上:
        >引用是采用直接访问形式
        >指针则需要采用间接访问形式(地址)
    ②作为函数参数类型:
        >引用类型参数的实参是一个变量的名字
        >指针类型参数的实参是一个变量的地址
    ③定义时初始化以后:
        >引用类型变量不能再引用其它变量
        >指针类型变量可以指向其它的变量
    ④引用类型一般作为指针类型来实现(有时又把引用类型称作隐蔽的指针(hidden pointer))