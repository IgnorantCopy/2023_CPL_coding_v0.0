一、一些概念
1.地址
>特殊的整数,通常用十六进制表示
    >计算机的内存可以看作是由一系列内存单元组成,每个内存单元(一个字节容量)由一个地址进行标识
>通过首地址和存储单元里数组的数据类型,定位内存中的数据
    >首地址决定访问的起点,数据类型决定数据占用的内存单元数

2.访问数据的方式
    ①通过变量名:变量的地址与变量名之间存在映射关系,一般情况下,高级程序语言通过这种映射关系使用变量名访问数据
    ②通过变量地址:如果在程序中已知变量的地址,可以使用这个地址访问数据,省略系统映射环节,从而提高数据的访问效率

二、指针的基本概念
1.构造:由一个变量类型(基类型)关键词和一个 * 构造而成
2.指针变量的定义方法
    ①用构造好的指针类型定义指针变量:
        typedef int * Pointer;
        Pointer p1, p2;
    ②在构造指针类型的同时定义指针变量:
        int *p;
3.指针变量初始化:可以 ||  || NULL 来初始化一个指针变量
    ①用一个变量的地址(&<variableName>)初始化:
        int i = 0;
        int *pi = &i;    //取出变量i的地址,用来初始化指针变量pi
    >要求:用来初始化的指针变量要预先定义,且类型与指针基类型一致
    ②用另一个指针变量或指针常量初始化:
        int a[10] = {0};
        int *pa = a;
    ③用NULL初始化:
        int *pv = NULL;    //相当于 int *pv = 0;
    >注:不推荐将一个非0整数赋给一个指针变量,因为一个事先确定的地址不一定是系统分配给该程序的内存单元地址,不一定能在改程序中访问
4.相关操作
    ①取地址操作:用&(地址操作符)获取操作数的地址,其操作数应为各种类型的变量\数组元素等,不能是表达式、字面常量、寄存器变量
    ②取值操作:用*(指针操作符)获得指针变量指向的内存数据,其操作数应为指针变量或地址类型的数据
    注:构造指针类型时的 * 不是指针操作符
    e.g.
    int *pi = NULL;
    int i = 0;
    pi = &i;    //pi指向i
    *pi = 1;    //i = 1;
    *(&i) = 2;  //i = 2;
    pi = &(*pi);//pi = pi;
    ③赋值操作:指针变量赋值操作右边的操作数必须是一个地址(或者0),且右操作数中的变量要预先定义,类型与左边指针变量的基类型一致(必要时强制类型转换)
    注:指针变量必须先初始化赋值,然后才能进行其他操作,否则其所存储的地址是不确定的,会引起不确定的错误
    ④关系/逻辑操作:两个指针类型可以进行比较,判断它们在内存中的位置的前后关系(前提:同一个)
    ⑤+/-一个整数:可以使原来的地址成为另一个变量的地址(前提:操作结果是一个有效的内存单元地址)
    注意:+/-一个整数i后的结果不是在原来的地址的基础上+/-i,而是i * sizeof(基类型)
    ⑥两个相同类型的指针类型数据的相减:结果为两个地址之间可存储基类型数据的个数,通常用来计算某数组两个元素之间的偏移量

e.g.(int *pa = a, *pa1 = a[2], *pa2 = a[4];)
    pa+n: pa之后第n个元素的地址
    pa-n: pa之前第n个元素的地址
    pa++: pa作为当前操作数，再后移一个元素
    ++pa: pa后移一个元素，再作为当前操作数
    pa--: pa作为当前操作数，再前移一个元素
    --pa: pa前移一个元素，再作为当前操作数
    pa2-pa1: 2, 表示pa2和pa1之间相隔2个元素

5.输出
    int i = 1;
    int *p = &i;
    printf("%x", p);    //输出p的值(i的地址)(16进制)
    printf("%d", *p);   //输出i的值

6.指针数组
    ①定义:每一个元素都是指针类型的数据的数组
    e.g.
    int i = 0;
    int j = 1;
    int k = 2;
    int *ap[3] = {&i, &j, &k};
    ②用途:一般用于处理多个字符串

7.多级指针变量
    e.g.
    int i = 0;
    int *pi = &i;
    int **ppi = &pi;    //指针变量ppi存储的是指针变量pi的地址
    >用途:通常用于指针类型数据的传址调用,或者用于多维数组和多个字符串的处理

8.void类型:通用指针类型
    ①不指向具体的数据,不能用来访问数据,但是可以与其他任何指针类型数据进行相互赋值和比较操作,并且不需要强制类型转换
    ②用途:经常作为函数的形参和返回值的类型,以提高函数的通用性

三、指针的应用
1.用指针操纵数组(注意下标越界)
    >下标法:通过下标操作指定元素
    >指针移动法:通过+/-一个整数操作指定元素地址
    >偏移量法:通过取值操作和+/-一个整数操作指定元素
    ①一维数组:见ArrayPointer1.c
        注:指向数组元素的指针变量 vs 数组名
            ①数组名是常量
                >数组名的值不能修改
            ②指向数组元素的指针变量是变量
                >用来存放一个数组各个元素的地址
                >一般情况下,这个变量的初始值与数组名表示的地址相同
                >经过操作,其值可能会是其他元素的地址

        注:数组的指针(不是指针数组):指向整个数组的指针变量
            e.g.
            int (*p)[10];
            int a[10] = {0};
            p = &a;    //此处p是一个二级指针
            //(*p)[i] <==> a[i]
            //p++;  ==>  数组越界

            int *p[10] vs int (*p)[10]
            I.int *p[10]是一个数组
            II.int (*p)[10]是一个指针

    ②二维数组
        e.g.1
        int b[5][10] = {0};
        int *p;
        p = &b[0][0];    //或者 p = b[0];
        e.g.2
        int (*q)[10];
        q = &b[0];    //或者 q = b;
        e.g.3
        int b[5][10] = {0};
        int (*r)[5][10];
        r = &b;    //三级指针变量
2.用指针在函数间传递数据
    ①传址调用:指针变量可以用作函数的形参,以提高函数间大量数据(比如数组)的传递效率
    ②const:为了避免在函数中给*p赋值,可以使用关键词const将形参设置成指向常量的指针类型
    ③指针型函数:C语言的return语句只能返回一个值(不能返回数组类型的数据),但可以返回数组或数组元素的地址
                当函数的返回值是一个地址时，称该函数为指针型函数
    注:指针型函数一般不能返回局部变量的地址
3.用指针访问动态变量
    ①动态变量的定义:指在程序运行中，由程序根据需要所创建的变量
    ②动态变量的创建
        >一维数组
        #include <stdlib.h>
        int *p1;
        /* void *malloc(unsigned int size);
         * 该函数在stdlib.h中声明,其功能是在程序的堆区分配size个单元,并返回该内存空间的首地址,其类型为: void *
         * 调用时一般需要用操作符 sizeof 计算需要分配的单元个数作为实参,并对返回值进行强制类型转换,以便存储某具体类型的数据
         */
        p1 = (int *)malloc(sizeof(int) * n);    //创建了一个由n个int型元素所构成的动态数组变量
        >二维数组
        int *p = (int *)malloc(sizeof(int) * m * n);    //创建一个m行n列的动态数组
    ③动态变量的撤销
        free(p1);   //撤销p1指向的int型动态变量
    ④动态变量的访问:使用指针
    ⑤动态变量的生存期
        >定义:从函数调用malloc后开始,到函数调用free时结束的时间段
        >一个动态变量创建后,只要不对它进行函数调用free,它就一直存在,直到程序执行结束
    ⑥栈区和堆区
        >栈区(stack):由编译器自动分配释放,存放函数的参数值,局部变量的值等,内存的分配是连续的,类似于平时我们所说的栈
        >堆区(heap):一般由程序员分配释放,若程序员不释放,程序结束时可能由操作系统回收,类似于链表,在内存中的分布不是连续的
                它们是不同区域的内存块通过指针链接起来的,一旦某一节点从链中断开,我们要人为的把所断开的节点从内存中释放
    ⑦内存泄漏与悬浮指针
        >内存泄漏(memory leak):没有撤消动态变量,而把指向它的指针变量指向了别处或指向它的指针变量的生存期结束了,这时,
                            这个动态变量存在但不可访问,从而浪费空间
            e.g.
            int x;
            int *p = (int *)malloc(sizeof(int) * 10);
            p = &x;
            //后面动态数组就访问不到了
        >悬浮指针(dangling pointer):用free撤消动态变量后,编译程序一般不会把指向它的指针变量的值赋为0,这时该指针指向一个无效空间
            e.g.
            int *p = (int *)malloc(sizeof int);
            ...
            free(p);
            ...
            *p = NULL;  //==>X
4.用指针操纵函数
C程序运行期间,程序中每个函数的目标代码也占据一定的内存空间.C语言允许将该内存空间的首地址赋给函数指针类型的变量
(简称函数指针，注意与指针型函数的区别),然后通过函数指针来调用函数
    >对于一个函数,比如int F(int m) { ... },可以用取地址操作符&(或直接用函数名)来获得其内存地址
        int (*pf)(int);    //第一个int是函数的返回值类型,第二个int是参数的类型
        pf = &F;  or  pf = F;
        pf(10);  or   (*pf)(10);   //以10为实参调用函数F