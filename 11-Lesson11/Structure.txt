一、结构类型基本概念
1.作用:用于表示由固定多个类型可以不同的成员所构成的数据群体(成员在逻辑上没有先后逻辑关系)
2.构造:
    struct Date {
        int year;
        int month;
        int day;
    };
    struct Student {
        int id;
        char *name;
        int age;
        double score;
        struct Date birthday;
    };
    注:
    ①成员可以是除了 void 和本结构类型以外的任意数据类型
    ②构造结构类型时,不能对成员进行初始化
3.结构变量的定义和初始化
    ①可以用构造好的结构类型来定义结构变量
    ②也可以在构造结构类型的同时直接定义结构变量
    Student student1 = {231880174, "Carl", 90, {2005, 7, 4};
4.结构变量的存储
    >系统按构造时的顺序为各个成员分配空间
    >系统往往以(最大元素所占)字节为单位给结构变量分配空间
    >基本原则
        ①数据成员对齐准则:第一个数据成员放在offset为0的地方,以后每个数据成员存储的起始位置要从该成员的整数倍开始
        ②结构体作为成员:如果一个结构体有某些结构体成员,则结构体成员要从其内部最大元素大小的整数倍地址开始存储
        ③收尾工作:结构体的大小,必须是其内部最大成员的整数倍,不足的要补齐
5.结构类型数据的操作
    ①访问成员的格式:<结构变量名>.<成员名>
    // .(成员操作符):是双目运算符,具有1级优先级,结合性为自左向右
    ②相同结构类型的不同变量之间可以直接相互赋值,其实质是两个结构变量相应的存储空间中的所有成员数据直接拷贝
    ③不同结构类型的结构变量之间不能相互赋值
6.结构数据类型作为函数参数/返回值(见Structure.c)
    ①作为参数传递给函数(值传递)
    ②作为返回值(结构型函数)

二、结构类型数组(见Structure.c)

三、用指针操作结构类型数据(见LinkedList.c)

四、联合类型
1.作用:实现某种程度上的多态
2.构造:
    union MyUnion {
        int i;
        char c;
        double d;
    }
3.联合变量的存储:按需占用内存最多的成员为联合类型分配内存
4.对联合变量的分时操作
    ①原因:当给一个联合变量的某个成员赋值后,其他成员的值不再是原来的值
    e.g.
        MyUnion.i = 12;
        ...
        MyUnion.c = 'x';
        ...
        MyUnion.d = 3.14;
        ...
