一、计算机对整型的存储
1.机器数:用'0'表示正数,用'1'表示负数
2.补码:
    ①正数:同原码
    ②负数:符号位同原码,其余取反,末位+1
    ③补码的优势:
        >数组0的补码只有一个: 00000000(8位)  ;  10000000(8位)是-128的补码
        >可将结果变成加法

二、对字符的存储
1.转义字符:八进制转义字符和十六进制转义字符 是用两个单引号(')括起来的一个特殊字符序列,
        其中的字符序列以 \ 开头,后面是一个特殊字符或八进制ASCII码或十六进制ASCII码
2.字符串:特殊的一维字符数组(末位为'\0')
3.宽字符:使用其他字符标准
e.g.
#include <stdio.h>
#include <locale.h>
int main() {
    setlocale(LC_ALL, "");    //设置为本地区域字符库
    wchar_t wideChar = 25105;
    wprintf(L"%c\n", wideChar);    //'我'
    return 0;
}

三、伪随机数的生成:利用rand()函数
rand()会返回一随机数值,范围在0 ~ RAND_MAX之间(RAND_MAX定义在stdlib.h, == 2147483647)
e.g.
#include <stdio.h>
#include <stdlib.h>
$include <time.h>

void main() {
    srand(time(NULL));
    for (int i = 0; i < 10; i++) {
        printf("%d\n", rand() % 100);
    }
}

四、操作符(运算符)
1.定义:用于描述对于数据(操作数)的运算
2.种类:
    ①算数操作符: + - * / % ++ --
    注: ① / 用于两个整数或实数相除(0不能用作除数),两个整数相除时,只取商的整数部分
        ② % 用于计算两个整数相除的余数
        ③ ++ --: 前缀:先运算,再赋值 ; 后缀:先赋值,再运算
    ②关系操作符: > < >= <= == !=
    ③逻辑操作符: ! && ||
    注: ①De Morgen定理:
        > !(a && b) == (!a) || (!b)
        > !(a || b) == (!a) && (!b)
        > !((a && b) || c) == (!a || !b) && !c
    ④位操作:
        I.定义:将整型操作数看作二进制位序列进行操作
        II.分类:
            i.逻辑位操作
                > ~:取反.用来把一个二进制位序列中的每一位 '0' --> '1' ; '1' --> '0'
                > &:与.对两个二进制位序列逐位进行 与 操作,即只有两位都是'1',才返回'1'
                > |:或.对两个二进制位序列逐位进行 或 操作,即对应位有'1',就返回'1'
                > ^:异或.对两个二进制位序列逐位进行 异或 操作,即对应位不同,返回'1',否则为'0'
            ii.移位操作
                > <<:左移. m << n 相当于 m * pow(2, n)
                    规则:左边的丢弃,右边补0
                > >>:右移. m >> n 相当于 m / pow(2, n)
                    规则:右边的丢弃,左边如果是逻辑右移,补0,如果是算数右移,补1
    ⑤赋值操作: = += -= *= /= %= &= |= ^= <<= >>=
    ⑥其他操作符:
        >条件操作符: (condition) ? <tureValue> : <falseValue>
        >逗号操作符: <code1>, <code2>, <code3>;
3.优先级: 单目 > 双目 > 三目 > 赋值 > 逗号
        其中双目操作符的优先级为: 算术 > 移位 > 关系 > 逻辑位 > 逻辑
4.结合性:操作符和操作数的结合特性
    ①分类:左结合 + 右结合
    ②规则:
        >算数:优先级相同的情况下,为左结合
        >逻辑:优先级相同的情况下,为右结合
        >赋值:优先级相同的情况下,为右结合
        >条件:优先级相同的情况下,为右结合
5.副作用:少数操作符(赋值、自增/自减)会改变参与操作的操作数的值
    因此要求其单个操作数或左边的操作数必须是左值表达式
    √: x = 3 、(x = 2) = 3 、++x 、(x = 2)++ 、(++x)++
    ×: 3++ 、(a + b)-- 、3 = b 、(!m) = n 、(x++)++ (Undefined Behavior)

六、表达式
1.表达式的值
    ①算术表达式的值:通常是一个整数或小数,具体类型由表达式中操作数的类型决定,一般存储在内存的临时空间里
                    (自增\自减的结果一般存储在操作数中)
    ②逻辑表达式的值:一般存在内存的临时空间里
    ③赋值表达式的值:存储在左边的操作数中
    ④条件表达式的值:一般存在内存的临时空间里
    ⑤逗号表达式的值:最后一个逗号的运算结果,一般存在内存的临时空间里
    ⑥左值表达式的值:存储在操作数中,即表达式的值有明确的内存地址
2.表达式的操作顺序
    ①对于相邻的两个操作:
        >先处理优先级高的操作符
        >如果优先级相同,判断两个操作符的结合性,左结合先处理左边的操作符,右结合先处理右边的操作符
        >括号优先进行操作
    ②对于不相邻的两个操作:取决于编译器